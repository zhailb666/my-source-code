class ClearLog {
    apply(compiler) {
        compiler.hooks.emit.tapAsync('clearLogEmit', function(compilation, next) {
            // console.log('在将内存中 assets 内容写到磁盘文件夹之前')
            // for(var p in compilation) {
            //     console.log(p, 'compilation属性');
            // }
            compilation.chunks.forEach(function (chunk) {
                // Explore each asset filename generated by the chunk and replace the console.* methods:
                chunk.files.forEach(function (filename) {
                    // Get the asset source for each file generated by the chunk:
                    var source = compilation.assets[filename].source();
    
                    var consoleName=["log","console","window.console"];
                    var consoleType= ["log", "info", "warn", "error" ,"assert" ,"count" ,"clear", "group" ,
                        "groupEnd", "groupCollapsed" ,"trace" ,"debug", "dir" ,"dirxml", "profile", "profileEnd" ,
                        "time" ,"timeEnd" ,"timeStamp" ,"table","exception"];
    
                    //Console.log|debug|info|warn|error regexp
                    const rConsole = new RegExp("(" + consoleName.join("|") + ")" + ".(?:" + consoleType.join("|") + ")\\s{0,}\\([^;]*\\)(?!\\s*[;,]?\\s*\\/\\*\\s*NotClearConsole\\s*\\*\\/)\\s{0,};?", "gi");
    
                    //Regexp replace null
                    source = source.replace(rConsole, function() {
                        return source.replaceWith || "";
                    });
    
                    compilation.assets[filename] = {
                        source: function () {
                            return source;
                        },
                        size: function () {
                            return source.length;
                        }
                    }
                });
            });
            next()
        })
    }
}

module.exports = ClearLog;